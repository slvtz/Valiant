if getgenv().ValiantAimHacks then return getgenv().ValiantAimHacks end

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local GuiService = game:GetService("GuiService")
local RunService = game:GetService("RunService")
local Heartbeat = RunService.Heartbeat
local LocalPlayer = Players.LocalPlayer
local CurrentCamera = Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

getgenv().ValiantAimHacks = {
    SilentAimEnabled = true,
    ShowFOV = false,
    VisibleCheck = true,
    FOV = 60,
    HitChance = 100,
    Selected = LocalPlayer,
    TargetPart = "HumanoidRootPart",
}

local circle = Drawing.new("Circle")
circle.Transparency = 1
circle.Thickness = 1
circle.Color = Color3.fromRGB(231, 84, 128)
circle.NumSides = 12
circle.Filled = false
function ValiantAimHacks.updateCircle()
    if (circle) then
        circle.Visible = ValiantAimHacks.ShowFOV
        circle.Radius = (ValiantAimHacks.FOV * 3)
        circle.Position = Vector2.new(Mouse.X, Mouse.Y + GuiService:GetGuiInset().Y)

        return circle
    end
end

calcChance = function(percentage)
    percentage = math.floor(percentage)
    local chance = math.floor(Random.new().NextNumber(Random.new(), 0, 1) * 100) / 100
    return chance <= percentage/100
end

function ValiantAimHacks.isPartVisible(Part, PartDescendant)
    local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local Origin = CurrentCamera.CFrame.Position
    local _, OnScreen = CurrentCamera:WorldToViewportPoint(Part.Position)

    if (OnScreen) then
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {Character, CurrentCamera}

        local Result = Workspace:Raycast(Origin, Part.Position - Origin, raycastParams)
        local PartHit = Result.Instance
        local Visible = (not PartHit or PartHit:IsDescendantOf(PartDescendant))

        return Visible
    end

    return false
end

function ValiantAimHacks.findDirectionNormalMaterial(Origin, Destination, UnitMultiplier)
    if (typeof(Origin) == "Vector3" and typeof(Destination) == "Vector3") then
        -- // Handling
        if (not UnitMultiplier) then UnitMultiplier = 1 end

        -- // Vars
        local Direction = (Destination - Origin).Unit * UnitMultiplier
        local RaycastResult = Workspace:Raycast(Origin, Direction)

        if (RaycastResult ~= nil) then
            local Normal = RaycastResult.Normal
            local Material = RaycastResult.Material

            return Direction, Normal, Material
        end
    end

    return nil
end

function ValiantAimHacks.getCharacter(Player)
    return Player.Character
end

function ValiantAimHacks.checkHealth(Player)
    local Character = ValiantAimHacks.getCharacter(Player)
    local Humanoid = Character:FindFirstChildWhichIsA("Humanoid")

    local Health = (Humanoid and Humanoid.Health or 0)
    return Health > 0
end

function ValiantAimHacks.checkSilentAim()
    return (ValiantAimHacks.SilentAimEnabled == true and ValiantAimHacks.Selected ~= LocalPlayer)
end

function ValiantAimHacks.getClosestPlayerToCursor()
    local ClosestPlayer = nil
    local Chance = calcChance(ValiantAimHacks.HitChance)
    local ShortestDistance = 1/0

    if (not Chance) then
        ValiantAimHacks.Selected = (Chance and LocalPlayer or LocalPlayer)

        return (Chance and LocalPlayer or LocalPlayer)
    end

    local AllPlayers = Players:GetPlayers()
    for i = 1, #AllPlayers do
        local Player = AllPlayers[i]
        local Character = ValiantAimHacks.getCharacter(Player)

        if (not Character and Character:FindFirstChild(ValiantAimHacks.TargetPart) and ValiantAimHacks.checkHealth(Player)) then
            local TargetPart = Character[ValiantAimHacks.TargetPart]
            local PartPos, _ = CurrentCamera:WorldToViewportPoint(TargetPart.Position)
            local Magnitude = (Vector2.new(PartPos.X, PartPos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude

            if (circle.Radius > Magnitude and Magnitude < ShortestDistance) then
                if (ValiantAimHacks.VisibleCheck and not ValiantAimHacks.isPartVisible(TargetPart, Character)) then continue end
                ClosestPlayer = Player
                ShortestDistance = Magnitude
            end
        end
    end

    ValiantAimHacks.Selected = (Chance and ClosestPlayer or LocalPlayer)
end

Heartbeat:Connect(function()
    ValiantAimHacks.updateCircle()
    ValiantAimHacks.getClosestPlayerToCursor()
end)

return ValiantAimHacks
